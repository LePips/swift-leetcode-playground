// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct StatStatusPair: Codable {
    public var stat: Stat
    public var status: String?
    public var difficulty: Difficulty
    public var isPaidOnly: Bool
    public var isFavor: Bool
    /// Example: 0.0
    public var frequency: Double
    public var progress: Double

    public init(
        stat: Stat,
        status: String? = nil,
        difficulty: Difficulty,
        isPaidOnly: Bool,
        isFavor: Bool,
        frequency: Double,
        progress: Double
    ) {
        self.stat = stat
        self.status = status
        self.difficulty = difficulty
        self.isPaidOnly = isPaidOnly
        self.isFavor = isFavor
        self.frequency = frequency
        self.progress = progress
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.stat = try values.decode(Stat.self, forKey: "stat")
        self.status = try values.decodeIfPresent(String.self, forKey: "status")
        self.difficulty = try values.decode(Difficulty.self, forKey: "difficulty")
        self.isPaidOnly = try values.decode(Bool.self, forKey: "paid_only")
        self.isFavor = try values.decode(Bool.self, forKey: "is_favor")
        self.frequency = try values.decode(Double.self, forKey: "frequency")
        self.progress = try values.decode(Double.self, forKey: "progress")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(stat, forKey: "stat")
        try values.encodeIfPresent(status, forKey: "status")
        try values.encode(difficulty, forKey: "difficulty")
        try values.encode(isPaidOnly, forKey: "paid_only")
        try values.encode(isFavor, forKey: "is_favor")
        try values.encode(frequency, forKey: "frequency")
        try values.encode(progress, forKey: "progress")
    }
}
