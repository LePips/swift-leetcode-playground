// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct BaseSubmissionResult: Codable {
    /// Example: ["stdout example", ""]
    public var codeOutput: [String]?
    /// Example: 19
    public var elapsedTime: Int
    /// Example: "SyntaxError: invalid syntax\n"
    public var fullRuntimeError: String?
    /// Example: "python"
    public var lang: String
    /// Example: 6996000
    public var memory: Int
    public var memoryPercentile: Double?
    /// Example: "Python"
    public var prettyLang: String
    /// Example: false
    public var isRunSuccess: Bool
    /// Example: "Line 5: SyntaxError: invalid syntax"
    public var runtimeError: String?
    public var runtimePercentile: Double?
    public var state: State
    public var statusCode: Int
    /// Example: "13.1 MB"
    public var statusMemory: String?
    /// Example: "Runtime Error"
    public var statusMsg: String
    /// Example: "36 ms"
    public var statusRuntime: String
    /// Example: "runcode_1627219627.5662382_EI7iasnhLm"
    public var submissionID: String
    /// Example: 1627219627690
    public var taskFinishTime: Int
    public var totalCorrect: Int?
    /// Example: 52
    public var totalTestcases: Int?
    public var questionID: Int?

    public enum State: String, Codable, CaseIterable {
        case success = "SUCCESS"
    }

    public init(
        codeOutput: [String]? = nil,
        elapsedTime: Int,
        fullRuntimeError: String? = nil,
        lang: String,
        memory: Int,
        memoryPercentile: Double? = nil,
        prettyLang: String,
        isRunSuccess: Bool,
        runtimeError: String? = nil,
        runtimePercentile: Double? = nil,
        state: State,
        statusCode: Int,
        statusMemory: String? = nil,
        statusMsg: String,
        statusRuntime: String,
        submissionID: String,
        taskFinishTime: Int,
        totalCorrect: Int? = nil,
        totalTestcases: Int? = nil,
        questionID: Int? = nil
    ) {
        self.codeOutput = codeOutput
        self.elapsedTime = elapsedTime
        self.fullRuntimeError = fullRuntimeError
        self.lang = lang
        self.memory = memory
        self.memoryPercentile = memoryPercentile
        self.prettyLang = prettyLang
        self.isRunSuccess = isRunSuccess
        self.runtimeError = runtimeError
        self.runtimePercentile = runtimePercentile
        self.state = state
        self.statusCode = statusCode
        self.statusMemory = statusMemory
        self.statusMsg = statusMsg
        self.statusRuntime = statusRuntime
        self.submissionID = submissionID
        self.taskFinishTime = taskFinishTime
        self.totalCorrect = totalCorrect
        self.totalTestcases = totalTestcases
        self.questionID = questionID
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.codeOutput = try values.decodeIfPresent([String].self, forKey: "code_output")
        self.elapsedTime = try values.decode(Int.self, forKey: "elapsed_time")
        self.fullRuntimeError = try values.decodeIfPresent(String.self, forKey: "full_runtime_error")
        self.lang = try values.decode(String.self, forKey: "lang")
        self.memory = try values.decode(Int.self, forKey: "memory")
        self.memoryPercentile = try values.decodeIfPresent(Double.self, forKey: "memory_percentile")
        self.prettyLang = try values.decode(String.self, forKey: "pretty_lang")
        self.isRunSuccess = try values.decode(Bool.self, forKey: "run_success")
        self.runtimeError = try values.decodeIfPresent(String.self, forKey: "runtime_error")
        self.runtimePercentile = try values.decodeIfPresent(Double.self, forKey: "runtime_percentile")
        self.state = try values.decode(State.self, forKey: "state")
        self.statusCode = try values.decode(Int.self, forKey: "status_code")
        self.statusMemory = try values.decodeIfPresent(String.self, forKey: "status_memory")
        self.statusMsg = try values.decode(String.self, forKey: "status_msg")
        self.statusRuntime = try values.decode(String.self, forKey: "status_runtime")
        self.submissionID = try values.decode(String.self, forKey: "submission_id")
        self.taskFinishTime = try values.decode(Int.self, forKey: "task_finish_time")
        self.totalCorrect = try values.decodeIfPresent(Int.self, forKey: "total_correct")
        self.totalTestcases = try values.decodeIfPresent(Int.self, forKey: "total_testcases")
        self.questionID = try values.decodeIfPresent(Int.self, forKey: "question_id")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(codeOutput, forKey: "code_output")
        try values.encode(elapsedTime, forKey: "elapsed_time")
        try values.encodeIfPresent(fullRuntimeError, forKey: "full_runtime_error")
        try values.encode(lang, forKey: "lang")
        try values.encode(memory, forKey: "memory")
        try values.encodeIfPresent(memoryPercentile, forKey: "memory_percentile")
        try values.encode(prettyLang, forKey: "pretty_lang")
        try values.encode(isRunSuccess, forKey: "run_success")
        try values.encodeIfPresent(runtimeError, forKey: "runtime_error")
        try values.encodeIfPresent(runtimePercentile, forKey: "runtime_percentile")
        try values.encode(state, forKey: "state")
        try values.encode(statusCode, forKey: "status_code")
        try values.encodeIfPresent(statusMemory, forKey: "status_memory")
        try values.encode(statusMsg, forKey: "status_msg")
        try values.encode(statusRuntime, forKey: "status_runtime")
        try values.encode(submissionID, forKey: "submission_id")
        try values.encode(taskFinishTime, forKey: "task_finish_time")
        try values.encodeIfPresent(totalCorrect, forKey: "total_correct")
        try values.encodeIfPresent(totalTestcases, forKey: "total_testcases")
        try values.encodeIfPresent(questionID, forKey: "question_id")
    }
}
