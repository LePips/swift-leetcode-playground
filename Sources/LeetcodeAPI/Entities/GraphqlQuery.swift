// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct GraphqlQuery: Codable {
    /// Example:
    ///
    /// "# operationName = "getQuestionDetail" query getQuestionDetail($titleSlug: String!) {
    ///   question(titleSlug: $titleSlug) {
    ///     questionId
    ///     questionFrontendId
    ///     boundTopicId
    ///     title
    ///     content
    ///     translatedTitle
    ///     isPaidOnly
    ///     difficulty
    ///     likes
    ///     dislikes
    ///     isLiked
    ///     similarQuestions
    ///     contributors {
    ///       username
    ///       profileUrl
    ///       avatarUrl
    ///       __typename
    ///     }
    ///     langToValidPlayground
    ///     topicTags {
    ///       name
    ///       slug
    ///       translatedName
    ///       __typename
    ///     }
    ///     companyTagStats
    ///     codeSnippets {
    ///       lang
    ///       langSlug
    ///       code
    ///       __typename
    ///     }
    ///     stats
    ///     codeDefinition
    ///     hints
    ///     solution {
    ///       id
    ///       canSeeDetail
    ///       __typename
    ///     }
    ///     status
    ///     sampleTestCase
    ///     enableRunCode
    ///     metaData
    ///     translatedContent
    ///     judgerAvailable
    ///     judgeType
    ///     mysqlSchemas
    ///     enableTestMode
    ///     envInfo
    ///     __typename
    ///   }
    /// } # operationName = None # { #   user { #     username #     isCurrentUserPremium #   } # } # operationName = problemsetQuestionList # query problemsetQuestionList($categorySlug: String, $limit: Int, $skip: Int, $filters: QuestionListFilterInput) { #  problemsetQuestionList: questionList( #    categorySlug: $categorySlug #    limit: $limit #    skip: $skip #    filters: $filters #  ) { #    totalNum #    questions: data { #      acRate #      difficulty #      freqBar #      questionFrontendId #      isFavor #      isPaidOnly #      status #      title #      titleSlug #      topicTags { #        name #        id #        slug #      } #      hasSolution #      hasVideoSolution #    } #  } #}
    /// "
    public var query: String
    public var variables: Variables
    public var operationName: AnyJSON?

    public struct Variables: Codable {
        public var object: [String: AnyJSON]?
        public var graphqlQueryGetQuestionDetailVariables: GraphqlQueryGetQuestionDetailVariables?
        public var graphqlQueryProblemsetQuestionListVariables: GraphqlQueryProblemsetQuestionListVariables?

        public init(
            object: [String: AnyJSON]? = nil,
            graphqlQueryGetQuestionDetailVariables: GraphqlQueryGetQuestionDetailVariables? = nil,
            graphqlQueryProblemsetQuestionListVariables: GraphqlQueryProblemsetQuestionListVariables? = nil
        ) {
            self.object = object
            self.graphqlQueryGetQuestionDetailVariables = graphqlQueryGetQuestionDetailVariables
            self.graphqlQueryProblemsetQuestionListVariables = graphqlQueryProblemsetQuestionListVariables
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.object = try? container.decode([String: AnyJSON].self)
            self.graphqlQueryGetQuestionDetailVariables = try? container.decode(GraphqlQueryGetQuestionDetailVariables.self)
            self.graphqlQueryProblemsetQuestionListVariables = try? container.decode(GraphqlQueryProblemsetQuestionListVariables.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = object { try container.encode(value) }
            if let value = graphqlQueryGetQuestionDetailVariables { try container.encode(value) }
            if let value = graphqlQueryProblemsetQuestionListVariables { try container.encode(value) }
        }
    }

    public init(query: String, variables: Variables, operationName: AnyJSON? = nil) {
        self.query = query
        self.variables = variables
        self.operationName = operationName
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.query = try values.decode(String.self, forKey: "query")
        self.variables = try values.decode(Variables.self, forKey: "variables")
        self.operationName = try values.decodeIfPresent(AnyJSON.self, forKey: "operationName")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(query, forKey: "query")
        try values.encode(variables, forKey: "variables")
        try values.encodeIfPresent(operationName, forKey: "operationName")
    }
}
