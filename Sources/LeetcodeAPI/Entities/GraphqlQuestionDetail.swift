// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct GraphqlQuestionDetail: Codable {
    /// Example: "2159"
    public var questionID: String?
    /// Example: "2003"
    public var questionFrontendID: String?
    public var boundTopicID: String?
    /// Example: "Two Sum"
    public var title: String?
    /// Example: "two-sum"
    public var titleSlug: String?
    /// Example: 0.0
    public var frequency: Double?
    /// Example: 86.81901768265547
    public var freqBar: Double?
    /// Example: "<p>Given an array of integers <code>nums</code>&nbsp;and an integer <code>target</code>, return <em>indices of the two numbers such that they add up to <code>target</code></em>.</p>\n\n<p>You may assume that each input would have <strong><em>exactly</em> one solution</strong>, and you may not use the <em>same</em> element twice.</p>\n\n<p>You can return the answer in any order.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,7,11,15], target = 9\n<strong>Output:</strong> [0,1]\n<strong>Output:</strong> Because nums[0] + nums[1] == 9, we return [0, 1].\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,2,4], target = 6\n<strong>Output:</strong> [1,2]\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,3], target = 6\n<strong>Output:</strong> [0,1]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= nums.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>-10<sup>9</sup> &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n\t<li><code>-10<sup>9</sup> &lt;= target &lt;= 10<sup>9</sup></code></li>\n\t<li><strong>Only one valid answer exists.</strong></li>\n</ul>\n\n<p>&nbsp;</p>\n<strong>Follow-up:&nbsp;</strong>Can you come up with an algorithm that is less than&nbsp;<code>O(n<sup>2</sup>)&nbsp;</code>time complexity?"
    public var content: String?
    public var translatedTitle: String?
    public var translatedContent: String?
    public var isPaidOnly: Bool?
    public var difficulty: AnyJSON?
    public var likes: Int?
    public var dislikes: Int?
    public var isLiked: Bool?
    public var isFavor: Bool?
    /// Example:
    ///
    /// "[
    ///   {
    ///     "title": "Two Sum",
    ///     "titleSlug": "two-sum",
    ///     "difficulty": "Easy",
    ///     "translatedTitle": null
    ///   },
    ///   {
    ///     "title": "3Sum",
    ///     "titleSlug": "3sum",
    ///     "difficulty": "Medium",
    ///     "translatedTitle": null
    ///   },
    ///   {
    ///     "title": "4Sum II",
    ///     "titleSlug": "4sum-ii",
    ///     "difficulty": "Medium",
    ///     "translatedTitle": null
    ///   },
    ///   {
    ///     "title": "Count Special Quadruplets",
    ///     "titleSlug": "count-special-quadruplets",
    ///     "difficulty": "Easy",
    ///     "translatedTitle": null
    ///   }
    /// ]
    /// "
    public var similarQuestions: String?
    public var contributors: [GraphqlQuestionContributor]?
    /// Example: "{"cpp": true, "java": true, "python": true}"
    public var langToValidPlayground: String?
    public var topicTags: [GraphqlQuestionTopicTag]?
    /// Example:
    ///
    /// "{
    ///   "3": [
    ///     {
    ///       "taggedByAdmin": true,
    ///       "name": "Cashfree",
    ///       "slug": "cashfree",
    ///       "timesEncountered": 0
    ///     }
    ///   ],
    ///   "1": [],
    ///   "2": []
    /// }
    /// "
    public var companyTagStats: String?
    public var codeSnippets: [GraphqlQuestionCodeSnippet]?
    /// Example:
    ///
    /// "{
    ///   "totalAccepted": "5M",
    ///   "totalSubmission": "10.5M",
    ///   "totalAcceptedRaw": 4983120,
    ///   "totalSubmissionRaw": 10461934,
    ///   "acRate": "47.6%"
    /// }
    /// "
    public var stats: String?
    /// Example: 62.202435813962666
    public var acRate: Double?
    public var hints: [String]?
    public var solution: GraphqlQuestionSolution?
    public var hasSolution: Bool?
    public var hasVideoSolution: Bool?
    public var status: AnyJSON?
    /// Example:
    ///
    /// "[2,7,11,15] 9
    /// "
    public var sampleTestCase: String?
    public var isJudgerAvailable: Bool?
    public var judgeType: AnyJSON?
    public var mysqlSchemas: [String]?
    public var enableRunCode: Bool?
    public var enableTestMode: Bool?
    /// Example:
    ///
    /// "{
    ///   "cpp": [
    ///     "C++",
    ///     "<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href='https://github.com/google/sanitizers/wiki/AddressSanitizer' target='_blank'>AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>"
    ///   ],
    ///   "java": [
    ///     "Java",
    ///     "<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>"
    ///   ],
    ///   "python": [
    ///     "Python",
    ///     "<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href='https://docs.python.org/2/library/array.html' target='_blank'>array</a>, <a href='https://docs.python.org/2/library/bisect.html' target='_blank'>bisect</a>, <a href='https://docs.python.org/2/library/collections.html' target='_blank'>collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href='http://www.grantjenks.com/docs/sortedcontainers/' target='_blank'>sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href='https://www.python.org/dev/peps/pep-0373/' target='_blank'>will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>"
    ///   ]
    /// }
    /// "
    public var envInfo: String?
    /// Example:
    ///
    /// "{
    ///   "name": "twoSum",
    ///   "params": [
    ///     {
    ///       "name": "nums",
    ///       "type": "integer[]"
    ///     },
    ///     {
    ///       "name": "target",
    ///       "type": "integer"
    ///     }
    ///   ],
    ///   "return": {
    ///     "type": "integer[]",
    ///     "size": 2
    ///   },
    ///   "manual": false
    /// }
    /// "
    public var metaData: String?
    /// Example:
    ///
    /// "[
    ///   {
    ///     "value": "cpp",
    ///     "text": "C++",
    ///     "defaultCode": "class Solution {\npublic:\n    vector<int> twoSum(vector<int>& nums, int target) {\n        \n    }\n};"
    ///   },
    ///   {
    ///     "value": "java",
    ///     "text": "Java",
    ///     "defaultCode": "class Solution {\n    public int[] twoSum(int[] nums, int target) {\n        \n    }\n}"
    ///   },
    ///   {
    ///     "value": "python",
    ///     "text": "Python",
    ///     "defaultCode": "class Solution(object):\n    def twoSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        "
    ///   },
    /// ]
    /// "
    public var codeDefinition: String?

    public init(
        questionID: String? = nil,
        questionFrontendID: String? = nil,
        boundTopicID: String? = nil,
        title: String? = nil,
        titleSlug: String? = nil,
        frequency: Double? = nil,
        freqBar: Double? = nil,
        content: String? = nil,
        translatedTitle: String? = nil,
        translatedContent: String? = nil,
        isPaidOnly: Bool? = nil,
        difficulty: AnyJSON? = nil,
        likes: Int? = nil,
        dislikes: Int? = nil,
        isLiked: Bool? = nil,
        isFavor: Bool? = nil,
        similarQuestions: String? = nil,
        contributors: [GraphqlQuestionContributor]? = nil,
        langToValidPlayground: String? = nil,
        topicTags: [GraphqlQuestionTopicTag]? = nil,
        companyTagStats: String? = nil,
        codeSnippets: [GraphqlQuestionCodeSnippet]? = nil,
        stats: String? = nil,
        acRate: Double? = nil,
        hints: [String]? = nil,
        solution: GraphqlQuestionSolution? = nil,
        hasSolution: Bool? = nil,
        hasVideoSolution: Bool? = nil,
        status: AnyJSON? = nil,
        sampleTestCase: String? = nil,
        isJudgerAvailable: Bool? = nil,
        judgeType: AnyJSON? = nil,
        mysqlSchemas: [String]? = nil,
        enableRunCode: Bool? = nil,
        enableTestMode: Bool? = nil,
        envInfo: String? = nil,
        metaData: String? = nil,
        codeDefinition: String? = nil
    ) {
        self.questionID = questionID
        self.questionFrontendID = questionFrontendID
        self.boundTopicID = boundTopicID
        self.title = title
        self.titleSlug = titleSlug
        self.frequency = frequency
        self.freqBar = freqBar
        self.content = content
        self.translatedTitle = translatedTitle
        self.translatedContent = translatedContent
        self.isPaidOnly = isPaidOnly
        self.difficulty = difficulty
        self.likes = likes
        self.dislikes = dislikes
        self.isLiked = isLiked
        self.isFavor = isFavor
        self.similarQuestions = similarQuestions
        self.contributors = contributors
        self.langToValidPlayground = langToValidPlayground
        self.topicTags = topicTags
        self.companyTagStats = companyTagStats
        self.codeSnippets = codeSnippets
        self.stats = stats
        self.acRate = acRate
        self.hints = hints
        self.solution = solution
        self.hasSolution = hasSolution
        self.hasVideoSolution = hasVideoSolution
        self.status = status
        self.sampleTestCase = sampleTestCase
        self.isJudgerAvailable = isJudgerAvailable
        self.judgeType = judgeType
        self.mysqlSchemas = mysqlSchemas
        self.enableRunCode = enableRunCode
        self.enableTestMode = enableTestMode
        self.envInfo = envInfo
        self.metaData = metaData
        self.codeDefinition = codeDefinition
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.questionID = try values.decodeIfPresent(String.self, forKey: "questionId")
        self.questionFrontendID = try values.decodeIfPresent(String.self, forKey: "questionFrontendId")
        self.boundTopicID = try values.decodeIfPresent(String.self, forKey: "boundTopicId")
        self.title = try values.decodeIfPresent(String.self, forKey: "title")
        self.titleSlug = try values.decodeIfPresent(String.self, forKey: "titleSlug")
        self.frequency = try values.decodeIfPresent(Double.self, forKey: "frequency")
        self.freqBar = try values.decodeIfPresent(Double.self, forKey: "freqBar")
        self.content = try values.decodeIfPresent(String.self, forKey: "content")
        self.translatedTitle = try values.decodeIfPresent(String.self, forKey: "translatedTitle")
        self.translatedContent = try values.decodeIfPresent(String.self, forKey: "translatedContent")
        self.isPaidOnly = try values.decodeIfPresent(Bool.self, forKey: "isPaidOnly")
        self.difficulty = try values.decodeIfPresent(AnyJSON.self, forKey: "difficulty")
        self.likes = try values.decodeIfPresent(Int.self, forKey: "likes")
        self.dislikes = try values.decodeIfPresent(Int.self, forKey: "dislikes")
        self.isLiked = try values.decodeIfPresent(Bool.self, forKey: "isLiked")
        self.isFavor = try values.decodeIfPresent(Bool.self, forKey: "isFavor")
        self.similarQuestions = try values.decodeIfPresent(String.self, forKey: "similarQuestions")
        self.contributors = try values.decodeIfPresent([GraphqlQuestionContributor].self, forKey: "contributors")
        self.langToValidPlayground = try values.decodeIfPresent(String.self, forKey: "langToValidPlayground")
        self.topicTags = try values.decodeIfPresent([GraphqlQuestionTopicTag].self, forKey: "topicTags")
        self.companyTagStats = try values.decodeIfPresent(String.self, forKey: "companyTagStats")
        self.codeSnippets = try values.decodeIfPresent([GraphqlQuestionCodeSnippet].self, forKey: "codeSnippets")
        self.stats = try values.decodeIfPresent(String.self, forKey: "stats")
        self.acRate = try values.decodeIfPresent(Double.self, forKey: "acRate")
        self.hints = try values.decodeIfPresent([String].self, forKey: "hints")
        self.solution = try values.decodeIfPresent(GraphqlQuestionSolution.self, forKey: "solution")
        self.hasSolution = try values.decodeIfPresent(Bool.self, forKey: "hasSolution")
        self.hasVideoSolution = try values.decodeIfPresent(Bool.self, forKey: "hasVideoSolution")
        self.status = try values.decodeIfPresent(AnyJSON.self, forKey: "status")
        self.sampleTestCase = try values.decodeIfPresent(String.self, forKey: "sampleTestCase")
        self.isJudgerAvailable = try values.decodeIfPresent(Bool.self, forKey: "judgerAvailable")
        self.judgeType = try values.decodeIfPresent(AnyJSON.self, forKey: "judgeType")
        self.mysqlSchemas = try values.decodeIfPresent([String].self, forKey: "mysqlSchemas")
        self.enableRunCode = try values.decodeIfPresent(Bool.self, forKey: "enableRunCode")
        self.enableTestMode = try values.decodeIfPresent(Bool.self, forKey: "enableTestMode")
        self.envInfo = try values.decodeIfPresent(String.self, forKey: "envInfo")
        self.metaData = try values.decodeIfPresent(String.self, forKey: "metaData")
        self.codeDefinition = try values.decodeIfPresent(String.self, forKey: "codeDefinition")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(questionID, forKey: "questionId")
        try values.encodeIfPresent(questionFrontendID, forKey: "questionFrontendId")
        try values.encodeIfPresent(boundTopicID, forKey: "boundTopicId")
        try values.encodeIfPresent(title, forKey: "title")
        try values.encodeIfPresent(titleSlug, forKey: "titleSlug")
        try values.encodeIfPresent(frequency, forKey: "frequency")
        try values.encodeIfPresent(freqBar, forKey: "freqBar")
        try values.encodeIfPresent(content, forKey: "content")
        try values.encodeIfPresent(translatedTitle, forKey: "translatedTitle")
        try values.encodeIfPresent(translatedContent, forKey: "translatedContent")
        try values.encodeIfPresent(isPaidOnly, forKey: "isPaidOnly")
        try values.encodeIfPresent(difficulty, forKey: "difficulty")
        try values.encodeIfPresent(likes, forKey: "likes")
        try values.encodeIfPresent(dislikes, forKey: "dislikes")
        try values.encodeIfPresent(isLiked, forKey: "isLiked")
        try values.encodeIfPresent(isFavor, forKey: "isFavor")
        try values.encodeIfPresent(similarQuestions, forKey: "similarQuestions")
        try values.encodeIfPresent(contributors, forKey: "contributors")
        try values.encodeIfPresent(langToValidPlayground, forKey: "langToValidPlayground")
        try values.encodeIfPresent(topicTags, forKey: "topicTags")
        try values.encodeIfPresent(companyTagStats, forKey: "companyTagStats")
        try values.encodeIfPresent(codeSnippets, forKey: "codeSnippets")
        try values.encodeIfPresent(stats, forKey: "stats")
        try values.encodeIfPresent(acRate, forKey: "acRate")
        try values.encodeIfPresent(hints, forKey: "hints")
        try values.encodeIfPresent(solution, forKey: "solution")
        try values.encodeIfPresent(hasSolution, forKey: "hasSolution")
        try values.encodeIfPresent(hasVideoSolution, forKey: "hasVideoSolution")
        try values.encodeIfPresent(status, forKey: "status")
        try values.encodeIfPresent(sampleTestCase, forKey: "sampleTestCase")
        try values.encodeIfPresent(isJudgerAvailable, forKey: "judgerAvailable")
        try values.encodeIfPresent(judgeType, forKey: "judgeType")
        try values.encodeIfPresent(mysqlSchemas, forKey: "mysqlSchemas")
        try values.encodeIfPresent(enableRunCode, forKey: "enableRunCode")
        try values.encodeIfPresent(enableTestMode, forKey: "enableTestMode")
        try values.encodeIfPresent(envInfo, forKey: "envInfo")
        try values.encodeIfPresent(metaData, forKey: "metaData")
        try values.encodeIfPresent(codeDefinition, forKey: "codeDefinition")
    }
}
