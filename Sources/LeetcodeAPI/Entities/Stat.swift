// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct Stat: Codable {
    public var questionID: Int
    public var isQuestionArticleLive: Bool?
    public var questionArticleSlug: String?
    public var questionArticleHasVideoSolution: Bool?
    public var questionTitle: String
    public var questionTitleSlug: String
    public var isQuestionHide: Bool
    public var totalAcs: Int
    public var totalSubmitted: Int
    public var frontendQuestionID: Int
    public var isNewQuestion: Bool

    public init(
        questionID: Int,
        isQuestionArticleLive: Bool? = nil,
        questionArticleSlug: String? = nil,
        questionArticleHasVideoSolution: Bool? = nil,
        questionTitle: String,
        questionTitleSlug: String,
        isQuestionHide: Bool,
        totalAcs: Int,
        totalSubmitted: Int,
        frontendQuestionID: Int,
        isNewQuestion: Bool
    ) {
        self.questionID = questionID
        self.isQuestionArticleLive = isQuestionArticleLive
        self.questionArticleSlug = questionArticleSlug
        self.questionArticleHasVideoSolution = questionArticleHasVideoSolution
        self.questionTitle = questionTitle
        self.questionTitleSlug = questionTitleSlug
        self.isQuestionHide = isQuestionHide
        self.totalAcs = totalAcs
        self.totalSubmitted = totalSubmitted
        self.frontendQuestionID = frontendQuestionID
        self.isNewQuestion = isNewQuestion
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.questionID = try values.decode(Int.self, forKey: "question_id")
        self.isQuestionArticleLive = try values.decodeIfPresent(Bool.self, forKey: "question__article__live")
        self.questionArticleSlug = try values.decodeIfPresent(String.self, forKey: "question__article__slug")
        self.questionArticleHasVideoSolution = try values.decodeIfPresent(Bool.self, forKey: "question__article__has_video_solution")
        self.questionTitle = try values.decode(String.self, forKey: "question__title")
        self.questionTitleSlug = try values.decode(String.self, forKey: "question__title_slug")
        self.isQuestionHide = try values.decode(Bool.self, forKey: "question__hide")
        self.totalAcs = try values.decode(Int.self, forKey: "total_acs")
        self.totalSubmitted = try values.decode(Int.self, forKey: "total_submitted")
        self.frontendQuestionID = try values.decode(Int.self, forKey: "frontend_question_id")
        self.isNewQuestion = try values.decode(Bool.self, forKey: "is_new_question")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(questionID, forKey: "question_id")
        try values.encodeIfPresent(isQuestionArticleLive, forKey: "question__article__live")
        try values.encodeIfPresent(questionArticleSlug, forKey: "question__article__slug")
        try values.encodeIfPresent(questionArticleHasVideoSolution, forKey: "question__article__has_video_solution")
        try values.encode(questionTitle, forKey: "question__title")
        try values.encode(questionTitleSlug, forKey: "question__title_slug")
        try values.encode(isQuestionHide, forKey: "question__hide")
        try values.encode(totalAcs, forKey: "total_acs")
        try values.encode(totalSubmitted, forKey: "total_submitted")
        try values.encode(frontendQuestionID, forKey: "frontend_question_id")
        try values.encode(isNewQuestion, forKey: "is_new_question")
    }
}
